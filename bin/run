#!/usr/bin/env python
# -*- coding: utf-8 -*-

from __future__ import (
    absolute_import, division, print_function, unicode_literals)

import requests

from importlib import import_module
from pprint import pprint
from optparse import OptionParser
from twisted.internet.task import react
from pipe2py import Context


def _load_json(json):
    try:
        loaded = loads(json.encode('utf-8'))
    except UnicodeDecodeError:
        loaded = loads(json)

    return loaded


def print_content(output):
    pipe = list(output)
    pprint(pipe[0])
    print('count:', len(pipe))


if __name__ == '__main__':
    usage = 'usage: %prog [pipeid]'
    parser = OptionParser(usage=usage)
    parser.add_option(
        "-a", dest="async", help="load async pipe", action="store_true")

    (options, args) = parser.parse_args()
    pipe_name = 'pipe_%s' % args[0]

    try:
        module = import_module('pipe2py.pypipelines.%s' % pipe_name)
    except ImportError:
        module = import_module('tests.pypipelines.%s' % pipe_name)

    context = Context(test=True, verbose=True)

    if options.async:
        generator_name = 'asyncPipe%s' % args[0].title()
        pipe_generator = getattr(module, generator_name)
        react(pipe_generator, [context])
    else:
        generator_name = pipe_name
        pipe_generator = getattr(module, generator_name)
        output = pipe_generator(context)
        print_content(output)
